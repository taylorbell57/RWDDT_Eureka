#!/bin/bash
set -euo pipefail

# Usage
if [ "$#" -lt 4 ] || [ "$#" -gt 6 ]; then
  echo "Usage: $0 <rootdir> <planet> <visit> <analyst> [<crds_dir>] [<layout: split|single>]"
  echo "Examples:"
  echo "  STScI split:   $0 /path/to/root TOI-1234b visit1 Analyst_A /grp/crds split"
  echo "  Community one: $0 /data        TOI-1234b visit1 Analyst_A \$HOME/crds_cache single"
  exit 1
fi

ROOTDIR=$1
PLANET=$2
VISIT=$3
ANALYST=$4
CRDS_DIR_DEFAULT="${HOME}/crds_cache"
CRDS_DIR="${5:-$CRDS_DIR_DEFAULT}"
LAYOUT_DEFAULT="single"
CRDS_LAYOUT="${6:-$LAYOUT_DEFAULT}"

case "$ROOTDIR" in
  /*) : ;;
  *) echo "Error: <rootdir> must be an absolute path (got '$ROOTDIR')."; exit 1 ;;
esac
if [ ! -d "$ROOTDIR" ]; then
  echo "Error: <rootdir> '$ROOTDIR' does not exist or is not a directory."
  exit 1
fi

VISIT_ROOT="${ROOTDIR%/}/JWST/${PLANET}/${VISIT}"
if [ ! -d "$(dirname "$VISIT_ROOT")" ]; then
  echo "Error: Parent directory '$(dirname "$VISIT_ROOT")' does not exist."
  echo "Create $ROOTDIR/JWST/$PLANET first, or fix your arguments."
  exit 1
fi

TEMPLATE_FILE="docker-compose.template.yml"
OUTPUT_FILE="docker-compose.yml"

# Resolve IDs for correct file ownership on host
ANALYST_UID=$(id -u)   # current user
ANALYST_GID=$(id -g)   # user's primary group by default

# For STScI split layout, prefer the rwddt group GID if it exists
if [ "$CRDS_LAYOUT" = "split" ]; then
  RWDDT_GID="$(getent group rwddt | cut -d: -f3 || true)"
  if [[ -n "${RWDDT_GID}" ]]; then
    ANALYST_GID="${RWDDT_GID}"
  fi
fi

# Determine CRDS mount target, bind mode, and CRDS_PATH inside the container
# split:
#   host mounts /grp/crds to /grp/crds (ro), CRDS_PATH=/grp/crds/cache
# single:
#   host mounts <crds_dir> to /crds (rw), CRDS_PATH=/crds
case "$CRDS_LAYOUT" in
  split)
    CRDS_TARGET="/grp/crds"
    CRDS_BIND_MODE="ro"
    CRDS_PATH="/grp/crds/cache"
    ;;
  single)
    CRDS_TARGET="/crds"
    CRDS_BIND_MODE="rw"
    CRDS_PATH="/crds"
    ;;
  *)
    echo "Error: invalid layout '$CRDS_LAYOUT' (use 'split' or 'single')."
    exit 1
    ;;
esac

# Check template
if [ ! -f "$TEMPLATE_FILE" ]; then
  echo "Error: $TEMPLATE_FILE not found in current directory."
  exit 1
fi

# Create project tree under the JWST namespace expected by the container
BASE_VISIT_DIR="$ROOTDIR/JWST/$PLANET/$VISIT"
ANALYSIS_DIR="$BASE_VISIT_DIR/$ANALYST"
NOTEBOOKS_DIR="$ANALYSIS_DIR/notebooks"
if command -v install >/dev/null 2>&1; then
  install -d -m 2700 -g "$ANALYST_GID" "$ANALYSIS_DIR" "$NOTEBOOKS_DIR"
else
  mkdir -p "$NOTEBOOKS_DIR"
  chmod 2700 "$ANALYSIS_DIR" "$NOTEBOOKS_DIR" || true
fi

# Ensure a local CRDS directory exists for single layout
if [ "$CRDS_LAYOUT" = "single" ]; then
  mkdir -p "${CRDS_DIR}" || true
fi

# Find an available port for the host to map to container port 8888
find_free_port() {
  local port
  while true; do
    port=$((10240 + RANDOM % 50000))
    if ! ss -ltn "( sport = :$port )" | grep -q ":$port "; then
      echo "$port"
      return
    fi
  done
}
HOST_PORT=$(find_free_port)

# Make a copy of the template
cp "$TEMPLATE_FILE" "$OUTPUT_FILE"

# Insert a do-not-commit banner at the top (compose tolerates comments)
sed -i.bak '1i\
# -----------------------------------------------------------------------------\n\
# This file was generated by configure_docker_compose.sh and may contain local \n\
# absolute paths. Do not commit this file. Use docker-compose.template.yml for  \n\
# shareable configuration.                                                     \n\
# -----------------------------------------------------------------------------\n' "$OUTPUT_FILE"

# Replace placeholders
sed -i.bak \
  -e "s|<rootdir>|$ROOTDIR|g" \
  -e "s|<planet>|$PLANET|g" \
  -e "s|<visit>|$VISIT|g" \
  -e "s|<analyst>|$ANALYST|g" \
  -e "s|<hostport>|$HOST_PORT|g" \
  -e "s|<uid>|$ANALYST_UID|g" \
  -e "s|<gid>|$ANALYST_GID|g" \
  -e "s|<crds_bind_mode>|$CRDS_BIND_MODE|g" \
  -e "s|<crds_dir>|$CRDS_DIR|g" \
  -e "s|<crds_target>|$CRDS_TARGET|g" \
  -e "s|<crds_path>|$CRDS_PATH|g" \
  "$OUTPUT_FILE"

# Clean up backup
rm -f "$OUTPUT_FILE.bak"

GREEN='\033[1;32m'; NC='\033[0m'
echo "Generated $OUTPUT_FILE with:"
echo "  rootdir  = \"$ROOTDIR\""
echo "  planet   = \"$PLANET\""
echo "  visit    = \"$VISIT\""
echo "  analyst  = \"$ANALYST\""
echo "  hostport = \"$HOST_PORT\""
echo "  analyst UID = \"$ANALYST_UID\""
echo "  group   GID = \"$ANALYST_GID\""
echo "  CRDS dir    = \"$CRDS_DIR\""
echo "  CRDS layout = \"$CRDS_LAYOUT\""
echo "  CRDS target = \"$CRDS_TARGET\" (container)"
echo "  CRDS mode   = \"$CRDS_BIND_MODE\""
echo
echo "Created directories (2700) under: $BASE_VISIT_DIR"
echo "  analysis  -> $ANALYSIS_DIR"
echo "  notebooks -> $NOTEBOOKS_DIR"

